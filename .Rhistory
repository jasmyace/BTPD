numUnit
mZone
if(i == 5){mZone <- 6}
nUnits
i <- 6
theUnit <- units[i]
numUnit <- as.numeric(substr(theUnit,7,7))                                               # applicable only to mZone?
unitFile <- theFiles[grepl(units[i],theFiles)]
numUnit
theUnit
uints
units
i <- 5
theUnit <- units[i]
numUnit <- as.numeric(substr(theUnit,7,7))                                               # applicable only to mZone?
unitFile <- theFiles[grepl(units[i],theFiles)]
numUnit
theUnit
dat <- dat1stZerosLeks[[numUnit]]
dat
numUnit
head(dat1stZerosLeks[[numUnit]])
dat <- dat1stZerosNoco[[numUnit]]
head(dat)
runType <- 'Noco'
theUnit
theUnit <- 'MZone 6'
if(min(dat$Year) == 1){
dat$Year <- dat$Year + 1964
}
bsums <- bayes$summary
Year <- data.frame(Year=seq(1965,2015,1))
mu.a <- bayes$summary[rownames(data.frame(bayes$summary)) == 'mu.a',][1]
mu.b <- bayes$summary[rownames(data.frame(bayes$summary)) == 'mu.b',][1]
sdnoise <- bayes$summary[rownames(data.frame(bayes$summary)) == 'sdnoise',][1]
indx <- data.frame(bsums)
indx$vars <- rownames(indx)
indx$x <- ifelse(substr(indx$vars,1,1) == 'N',substr(indx$vars,3,3),-99)
indx$y <- ifelse(substr(indx$vars,1,1) == 'N',ifelse(nchar(indx$vars) == 6,substr(indx$vars,5,5),substr(indx$vars,5,6)),-99)
indx$x0 <- ifelse(substr(indx$vars,1,2) == 'N0',ifelse(nchar(indx$vars) == 5,substr(indx$vars,4,4),substr(indx$vars,4,5)),-99)
# build the true B-matrix
nTimes <- length(unique(dat$Year))
beta.mzone <- matrix(NA,nrow=nZones,ncol=nTimes)
list.beta.mzone <- indx[substr(indx$vars,1,2) == 'N[',]
for(i in 1:nZones){
for(j in 1:nTimes){
beta.mzone[i,j] <- list.beta.mzone[list.beta.mzone$x == i & list.beta.mzone$y == j,]$mean
}
}
nZones <- 6
# build the true B-matrix
nTimes <- length(unique(dat$Year))
beta.mzone <- matrix(NA,nrow=nZones,ncol=nTimes)
list.beta.mzone <- indx[substr(indx$vars,1,2) == 'N[',]
for(i in 1:nZones){
for(j in 1:nTimes){
beta.mzone[i,j] <- list.beta.mzone[list.beta.mzone$x == i & list.beta.mzone$y == j,]$mean
}
}
i
j
list.beta.mzone
i
j
i <- 5
for(j in 1:nTimes){
beta.mzone[i,j] <- list.beta.mzone[list.beta.mzone$x == i & list.beta.mzone$y == j,]$mean
}
nTimes
i
k
j
list.beta.mzone$y
list.beta.mzone$y == j
list.beta.mzone[list.beta.mzone$x == i & list.beta.mzone$y == j,]
list.beta.mzone
list.beta.mzone$x == i
i
bayes$summary
i <- 1
for(i in 1:nZones){
for(j in 1:nTimes){
beta.mzone[i,j] <- list.beta.mzone[list.beta.mzone$x == i & list.beta.mzone$y == j,]$mean
}
}
i
beta.mzone
coreText <- 'ugh'
if(length(unique(dat$Year)) == 11){
minYear <- min(dat$Year)
medYear <- quantile(dat$Year,0.5) - minYear
maxYear <- max(dat$Year)
} else {
minYear <- 1965
medYear <- 26
maxYear <- 2015
}
i
i <- 1
theN <- data.frame(Year=seq(minYear,maxYear,1),N=beta.mzone[i,])
theN
obsMeans <- data.frame(MeanPMales=tapply(dat$Peak_Males, list(dat$Year), mean))
obsMeans$Year <- rownames(obsMeans)
plotYears <- merge(obsMeans,theN,by=c('Year'),all.x=TRUE)
plotYears$runType <- ''
plotYears$numMZone <- theUnit
plotYears$dataCut <- runType
plotYears$Nhat <- exp(mu.a + mu.b*(as.numeric(plotYears$Year) - (minYear - 1) - medYear) + 0.5*sdnoise*sdnoise)
plotYears
tracDir
# make plot, for each mzone, of core, non-core, all leks together - 1ST ZEROS
bsums.core.CSV <- vector("list",6)
bsums.noco.CSV <- vector("list",6)
bsums.leks.CSV <- vector("list",6)
units
i <- 5
read.csv(paste0(outpDir,'/Model E ',units[i],' Try 1/bayesSummary - Model E ',units[i],' Try 1.csv'))
outpDir
outpDir <- "//lar-file-srv/Data/Jason/sage grouse/Output"
read.csv(paste0(outpDir,'/Model E ',units[i],' Try 1/bayesSummary - Model E ',units[i],' Try 1.csv'))
bsums.noco.CSV[[i]] <- read.csv(paste0(outpDir,'/Model E ',units[i],' Try 1/bayesSummary - Model E ',units[i],' Try 1.csv'))
nocoMuB <- bsums.noco.CSV[[i]][bsums.noco.CSV[[i]]$X == 'mu.b',]$mean
nocoMuB
nocoMu.a <- bsums.noco.CSV[[i]][bsums.noco.CSV[[i]]$X == 'mu.a',]$mean
nocoMu.a
Year <- data.frame(Year=seq(1965,2015,1))
YearC <- Year - 1964 - 26
Y.noco      <- exp(nocoMu.a)*((nocoMuB+1)^YearC)
Y.noco.X5   <- exp(nocoMu.a.X5)*((nocoMuB+1)^YearC)
Y.noco.X95  <- exp(nocoMu.a.X95)*((nocoMuB+1)^YearC)
Y.noco
exp(nocoMu.a + nocoMuB*YearC)
coreMuB
coreMuB
nocoMuB <- bsums.noco.CSV[[i]][bsums.noco.CSV[[i]]$X == 'mu.b',]$mean
nocoMuB
exp(nocoMuB)
1-exp(nocoMuB)
nocoMuB + 1
head(dat1stZerosNoco[[mZone]])
require(R2WinBUGS)      # run WinBUGS
require(lme4)           # glmm for poisson
require(sp)             # read in spatial points
require(rgdal)          # read in and write shpfiles
require(rgeos)          # geometry processing
require(raster)         # read in rasters
require(maptools)       #spRbind
require(Cairo)          # nice output
require(RColorBrewer)   # nice colors
# all of these changed or commented out for version sent to paul -- 5.5.2016.
#dataDir <- "//LAR-FILE-SRV/Data/Jason/sage grouse/Data"
#origDir <- "//LAR-FILE-SRV/Data/Jason/sage grouse/sgPrograms/sentToPaul--2016.05.05"  # need this?
progDir <- "//LAR-FILE-SRV/Data/Jason/sage grouse/sgPrograms/sentToPaul--2016.05.05"
# wBugDir <- "//LAR-FILE-SRV/Data/Jason/sage grouse/Programs"
outpDir <- "//LAR-FILE-SRV/Data/Jason/sage grouse/sgPrograms/sentToPaul--2016.05.05" #"//LAR-FILE-SRV/Data/Jason/sage grouse/Output"
# rsltDir <- "//LAR-FILE-SRV/Data/Jason/sage grouse/Results"
# polyDir <- "//LAR-FILE-SRV/Data/Jason/sage grouse/Data/Spatial/Density Polygons"
analDir <- "//LAR-FILE-SRV/Data/Jason/sage grouse/sgPrograms/sentToPaul--2016.05.05/Spatial Analysis Sets"
#"//LAR-FILE-SRV/Data/Jason/sage grouse/Data/Spatial/Analysis Sets"
# manuDir <- '//LAR-FILE-SRV/Data/Jason/sage grouse/Results/Manuscript 2015.09.02'
PROJaea <- "+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"
PROJlat <- "+init=epsg:4326"
datAllZerosCore <- vector("list",9)
datAllZerosNoco <- vector("list",9)
datAllZerosLeks <- vector("list",9)
dat1stZerosCore <- vector("list",9)
dat1stZerosNoco <- vector("list",9)
dat1stZerosLeks <- vector("list",9)
#source(paste0(progDir,"/runMA.R"))
#source(paste0(progDir,"/runMB.R"))
#source(paste0(progDir,"/runMC.R"))
#source(paste0(progDir,"/runMD.R"))  # turn off for paul 5.5.2016.
source(paste0(progDir,"/runME.R"))
#source(paste0(progDir,"/runMF.R"))  # turn off for paul 5.5.2016.
#source(paste0(progDir,"/runMG.R"))
#source(paste0(progDir,"/runMH.R"))
#source(paste0(progDir,"/runMI.R"))
#source(paste0(progDir,"/runMJ.R"))
#source(paste0(progDir,"/runMK.R"))
#source(paste0(progDir,"/runML.R"))
#source(paste0(progDir,"/runMM.R"))
#source(paste0(progDir,"/runMN.R"))
#source(paste0(progDir,"/runMO.R"))
#source(paste0(progDir,"/runMP.R"))
#source(paste0(progDir,"/runMQ.R"))
#source(paste0(progDir,"/runMR.R"))
#source(paste0(progDir,"/runMS.R"))
#source(paste0(progDir,"/runMT.R"))
#source(paste0(progDir,"/runMU.R"))
# jason turns off these source files 5.5.2016 for paul
# source(paste0(progDir,"/runMV.R"))
# source(paste0(progDir,"/runMZ.R"))
# testing-for-discontinuity programs
# jason turns off these source files 5.5.2016 for paul
# source(paste0(progDir,"/runTestAn.R"))
# source(paste0(progDir,"/runTestBn.R"))
# source(paste0(progDir,"/runTestCn.R"))
# source(paste0(progDir,"/runTestDn.R"))
# source(paste0(progDir,"/runTestEn.R"))
# source(paste0(progDir,"/runTestFn.R"))
# source(paste0(progDir,"/runTestGn.R"))
# jason turns off these three lines for paul - 05.05.2016.  don't need if
# you're not going to remake rasters.
#sg <- read.csv(paste0(origDir,"/allStatesFinal2015.csv"))
#datList <- prepareForAnalysis(sg)
#rm(sg)
#makeDensityPolyBits(datList[[1]])                           # make shapefiles from rasters
# datList returns the sage grouse data in four different ways
#      data cut       nrows (all zeros)     nrows (special zeros)
# 1. all the data               92,031                    75,726
# 2.  1965 - 1989               xx,xxx                     3,180
# 3.  1990 - 2014               xx,xxx                     6,349
# 4. ??
#assignCore(datList[[1]])   # data gets output as shapefiles
#pointsSummary()             # summarize the points shapefiles
# do the analysis
# jason turns off 5.5.2016 for paul, and adds the explicit mZone vector below.
# mZones <- unique(datList[[1]]$mZoneNum)
# mZones <- mZones[order(mZones)]
mZones <- c("MZone 1","MZone 3","MZone 4","MZone 5","MZone 6","MZone 8")
#resultsA <- vector("list",8)
#resultsB <- vector("list",8)
#resultsC <- vector("list",8)
resultsD <- vector("list",8)
resultsE <- vector("list",8)
resultsF <- vector("list",8)
#resultsG <- vector("list",1)
#resultsH <- vector("list",1)
#resultsI <- vector("list",1)
#resultsJ <- vector("list",1)
#resultsK <- vector("list",1)
#resultsL <- vector("list",1)
#resultsM <- vector("list",1)
#resultsN <- vector("list",1)
#resultsO <- vector("list",1)
#resultsP <- vector("list",1)
#resultsQ <- vector("list",1)
#resultsR <- vector("list",1)
#resultsS <- vector("list",1)
#resultsT <- vector("list",1)
#resultsU <- vector("list",1)
# jason turns these 14 empty lists off.
# resultsV <- vector("list",8)
# resultsZ <- vector("list",1)
#
# resultsAllAn <- vector("list",8)
# resultsAllBn <- vector("list",8)
# resultsAllCn <- vector("list",8)
# resultsAllDn <- vector("list",8)
# resultsAllEn <- vector("list",8)
# resultsAllFn <- vector("list",8)
#
# results1stAn <- vector("list",8)
# results1stBn <- vector("list",8)
# results1stCn <- vector("list",8)
# results1stDn <- vector("list",8)
# results1stEn <- vector("list",8)
# results1stFn <- vector("list",8)
# for(i in 1:6){
#   if(i == 1){mZone <- 1}
#   if(i == 2){mZone <- 3}
#   if(i == 3){mZone <- 4}
#   if(i == 4){mZone <- 5}
if(i == 5){mZone <- 6}
#   if(i == 6){mZone <- 8}
#   if(i == 7){mZone <- 9}
#  jason add 5.5.2016 for paul -- these three assume all zeros treatment of zeros.
#datAllZerosCore[[mZone]] <- readOGR(analDir,paste0('Zone ',mZone,' Core-75 - All Zero'))@data        # read in all zeros, core data, ith mzone
#datAllZerosNoco[[mZone]] <- readOGR(analDir,paste0('Zone ',mZone,' Non-Core-75 - All Zero'))@data    # read in all zeros, non-core data, ith mzone
#datAllZerosLeks[[mZone]] <- readOGR(analDir,paste0('Zone ',mZone,' Both-75 - All Zero'))@data        # read in all zeros, all data, ith mzone
#  jason add 5.5.2016 for paul -- these three assume 1st-zeros treatment of zeros.
#dat1stZerosCore[[mZone]] <- readOGR(analDir,paste0('Zone ',mZone,' Core-75 - 1st Zero'))@data        # read in 1st zeros, core data, ith mzone
dat1stZerosNoco[[mZone]] <- readOGR(analDir,paste0('Zone ',mZone,' Non-Core-75 - 1st Zero'))@data     # read in 1st zeros, non-core data, ith mzone
#dat1stZerosLeks[[mZone]] <- readOGR(analDir,paste0('Zone ',mZone,' Both-75 - 1st Zero'))@data        # read in 1st zeros, all data, ith mzone
i <- 5
if(i == 5){mZone <- 6}
#   if(i == 6){mZone <- 8}
#   if(i == 7){mZone <- 9}
#  jason add 5.5.2016 for paul -- these three assume all zeros treatment of zeros.
#datAllZerosCore[[mZone]] <- readOGR(analDir,paste0('Zone ',mZone,' Core-75 - All Zero'))@data        # read in all zeros, core data, ith mzone
#datAllZerosNoco[[mZone]] <- readOGR(analDir,paste0('Zone ',mZone,' Non-Core-75 - All Zero'))@data    # read in all zeros, non-core data, ith mzone
#datAllZerosLeks[[mZone]] <- readOGR(analDir,paste0('Zone ',mZone,' Both-75 - All Zero'))@data        # read in all zeros, all data, ith mzone
#  jason add 5.5.2016 for paul -- these three assume 1st-zeros treatment of zeros.
#dat1stZerosCore[[mZone]] <- readOGR(analDir,paste0('Zone ',mZone,' Core-75 - 1st Zero'))@data        # read in 1st zeros, core data, ith mzone
dat1stZerosNoco[[mZone]] <- readOGR(analDir,paste0('Zone ',mZone,' Non-Core-75 - 1st Zero'))@data     # read in 1st zeros, non-core data, ith mzone
#BUGSDir <- 'C:/WinBUGS14'
BUGSDir <- 'C:/WinBUGS14'
resultsE[[mZone]] <- runME(dat1stZerosNoco[[mZone]],progDir,BUGSDir,'Try 1',mZone)
require(R2WinBUGS)      # run WinBUGS
require(lme4)           # glmm for poisson
require(sp)             # read in spatial points
require(rgdal)          # read in and write shpfiles
require(rgeos)          # geometry processing
require(raster)         # read in rasters
require(maptools)       # spRbind
require(Cairo)          # nice output
require(RColorBrewer)   # nice colors
# you'll need to change these to whatever they need to be.
# just dump the attachments in my email, in the folder structure as zipped,
# wherever you want them to go.  then just change the prefix of these file stems.
# you can keep them all the same to keep things easy.
progDir <- "//LAR-FILE-SRV/Data/Jason/sage grouse/sgPrograms/sentToPaul--2016.05.05"
outpDir <- "//LAR-FILE-SRV/Data/Jason/sage grouse/sgPrograms/sentToPaul--2016.05.05"
analDir <- "//LAR-FILE-SRV/Data/Jason/sage grouse/sgPrograms/sentToPaul--2016.05.05/Spatial Analysis Sets"
BUGSDir <- 'C:/WHEREVER THE WinBUGS14.exe FILE RESIDES.'
#BUGSDir <- 'C:/WinBUGS14'   # jason's machine
# read in the program that runs the first-zeros, periphery (non-core) model.
source(paste0(progDir,"/runME.R"))
# constants for this small application.
mZones <- c("MZone 1","MZone 3","MZone 4","MZone 5","MZone 6","MZone 8")
mZone <- 6
# list of data and/or results.
dat1stZerosNoco <- vector("list",9)       # holds the shapefile
resultsE <- vector("list",8)              # holds the results
dat1stZerosNoco[[mZone]] <- readOGR(analDir,paste0('Zone ',mZone,' Non-Core-75 - 1st Zero'))@data     # read in 1st zeros, non-core data, 6th mzone (WA)
resultsE[[mZone]] <- runME(dat1stZerosNoco[[mZone]],progDir,BUGSDir,'Try 1',mZone)                    # 1st zeros, non-core, ind mzone, B mat
# get 90% credible intervals.
# this is extracted from program make90pCredInt.R
# you'll need to change these to whatever they need to be.
# just dump the attachments in my email, in the folder structure as zipped,
# wherever you want them to go.  then just change the prefix of these file stems.
# you can keep them all the same to keep things easy.
progDir <- "//LAR-FILE-SRV/Data/Jason/sage grouse/sgPrograms/sentToPaul--2016.05.05"
outpDir <- "//LAR-FILE-SRV/Data/Jason/sage grouse/sgPrograms/sentToPaul--2016.05.05"
analDir <- "//LAR-FILE-SRV/Data/Jason/sage grouse/sgPrograms/sentToPaul--2016.05.05/Spatial Analysis Sets"
#BUGSDir <- 'C:/WHEREVER THE WinBUGS14.exe FILE RESIDES.'
BUGSDir <- 'C:/WinBUGS14'   # jason's machine
# read in the program that runs the first-zeros, periphery (non-core) model.
source(paste0(progDir,"/runME.R"))
# constants for this small application.
mZones <- c("MZone 1","MZone 3","MZone 4","MZone 5","MZone 6","MZone 8")
mZone <- 6
# list of data and/or results.
dat1stZerosNoco <- vector("list",9)       # holds the shapefile
resultsE <- vector("list",8)              # holds the results
dat1stZerosNoco[[mZone]] <- readOGR(analDir,paste0('Zone ',mZone,' Non-Core-75 - 1st Zero'))@data     # read in 1st zeros, non-core data, 6th mzone (WA)
resultsE[[mZone]] <- runME(dat1stZerosNoco[[mZone]],progDir,BUGSDir,'Try 1',mZone)                    # 1st zeros, non-core, ind mzone, B mat
bayes <- resultsE[[mZone]][[4]]
blist <- bayes$sims.list
bsums <- bayes$summary
# helper function
get5.95 <- function(metric){
if(is.matrix(blist[[metric]])){         # matrix
the.5.95 <- data.frame(X5.=apply(blist[[metric]],2,function(x) quantile(x,0.05)),X95.=apply(blist[[metric]],2,function(x) quantile(x,0.95)))
} else if(is.array(blist[[metric]])){   # array
the.5.95 <- data.frame(X5.=apply(blist[[metric]][,1,],2,function(x) quantile(x,0.05)),X95.=apply(blist[[metric]][,1,],2,function(x) quantile(x,0.95)))
} else {                                # vector
the.5.95 <- data.frame(X5.=quantile(blist[[metric]],0.05),X95.=quantile(blist[[metric]],0.95))
}
the.5.95
}
ans5.95 <- NULL
for(x in 1:length(bayes$sims.list)){
metric <- attributes(bayes$sims.list[x])$names[1]
ans <- get5.95(metric)
ans5.95 <- rbind(ans5.95,ans)
}
newAns <- cbind(bsums,ans5.95)
newAns <- newAns[,c('mean','sd','2.5%','X5.','25%','50%','75%','X95.','97.5%')]
names(newAns)[names(newAns) == 'X5.'] <- '5%'
names(newAns)[names(newAns) == 'X95.'] <- '95%'
newAns
require(SDrawNPS)
stratified.GUI()
setwd('\\\\lar-file-srv/Data/NPS/GRTSUsersManual/SDrawNPS/R')
# install.packages(c('RGtk2','rgdal','spsurvey','rgeos'))
require(RGtk2)
require(rgdal)
require(spsurvey)
require(rgeos)
require(roxygen2)
source( "add.sdraw.menu.R" )
source( "Adjwgt_FrameNR.R" )
source( "analysis.GUI.R" )
source( "analysis.R" )
#source( "analysisCont.R" )
source( "bas.line.R" )
source( "bas.point.R" )
source( "bas.polygon.R" )
source( "bas.R" )
source( "browse.for.shapefile.R" )
source( "draw.bas.R" )
source( "draw.grts.R" )
source( "draw.sss.R" )
source( "draw.strat.grts.R" )
source( "draw.unequal.grts.R" )
source( "equi.GUI.R" )
source( "error.message.R" )
source( "extractPathFilename.R" )
source( "getDataFrame.R" )
source( "getSpFrame.R" )
source( "grts.equi.R" )
source( "grts.strat.R" )
source( "grts.unequal.R" )
source( "halton.R" )
source( "hello.R" )
source( "makeAnalysisLog.R" )
source( "makeLog.R" )
#source( "my.write.csv.R" )
source( "my.write.shp.R" )
source( "my.write.csv.nonWidget.R")
source( "old.analysis.GUI.R" )
source( "plotSample.R" )
source( "readButtonAction.R" )
source( "readButtonActionCSV.R" )
source( "readInDat.R" )
source( "readShape.R" )
source( "run.sample.R" )
source( "run.strat.sample.R" )
source( "run.unequal.sample.R" )
source( "sss.line.R" )
source( "sss.polygon.R" )
source( "sss.R" )
source( "stratified.GUI.R" )
source( "unequal.GUI.R" )
source( "view.analysis.sample.R" )
source( "view.sample.R" )
source( "zzz.R" )
stratified.GUI()
require(devtools)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
help(stratified.GUI)
warnings()
document()
help(stratified.GUI)
document()
help(stratified.GUI)
warnings()
document()
help(stratified.GUI)
warnings()
document()
help(stratified.GUI)
warnings()
document()
help(stratified.GUI)
warnings()
document()
help(stratified.GUI)
help(equi.GUI)
help(stratified.GUI)
document()
help(stratified.GUI)
document()
help(stratified.GUI)
document()
help(stratified.GUI)
document()
help(stratified.GUI)
document()
help(stratified.GUI)
document()
help(stratified.GUI)
document()
help(stratified.GUI)
document()
help(stratified.GUI)
document()
help(stratified.GUI)
document()
help(stratified.GUI)
document()
help(stratified.GUI)
document()
help(stratified.GUI)
install.packages("Rtools")
sessionInfo()
require(Rtools)
checkOutCell(100)
install.packages("L:/BTPD_2016/Analysis/pDog_0.1.tar.gz", repos = NULL, type = "source")
require(devtools)
package.skeleton("pDog")
help(package.skeleton)
require(devtools)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
checkOutCell(100)
install.packages("L:/BTPD_2016/Analysis/pDog_0.1.zip", repos = NULL, type = "win.binary")
require(pDog)
checkOutCell(100)
checkOutCell(100)
checkCellValidity('pJason_Towns_CO156212')
checkInCell('CO156212')
paste0("               checkInCell('",theNext,"','",userID,"')\n\n")
theNext <- 'CO156212'
userID <- 100
paste0("               checkInCell('",theNext,"','",userID,"')\n\n")
help(legend)
help(pDog)
help(checkOutCell)
install.packages("L:/BTPD_2016/Analysis/pDog_0.1.zip", repos = NULL, type = "win.binary")
checkOutCell(100)
require(pDog)
checkOutCell(100)
checkCellValidity('pJason_Towns_CO156212')
checkInCell('CO156212','100')
checkInCell('CO156212','100')
theNext <- "CO156212"
userID <- 100
assign <- read.csv("//LAR-FILE-SRV/Data/BTPD_2016/Analysis/Database/tblCellStatus.csv",as.is = TRUE)
assign[assign$Grid_ID == theNext,]
install.packages("L:/BTPD_2016/Analysis/pDog_0.1.zip", repos = NULL, type = "win.binary")
checkInCell('CO156212','100')
require(pDog)
checkInCell('CO156212','100')
